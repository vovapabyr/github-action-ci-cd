# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: CI/CD Workflow

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    
jobs:
  build:

    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: |
        pytest

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
      
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    
    - uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      
    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: ./app 
        file: ./app/Dockerfile
        builder: ${{ steps.buildx.outputs.name }}
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/hello-gitops:${{ github.sha }}, ${{ secrets.DOCKER_USERNAME }}/hello-gitops:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache

  deploy: 
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    
    env:
      PROJECT_ID: ${{ secrets.GKE_PROJECT }}
      GKE_CLUSTER: autopilot-cluster-1    # TODO: update to cluster name
      GKE_REGION: us-central1	   # TODO: update to cluster region

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Setup Kustomize
      uses: imranismail/setup-kustomize@v1
      with:
        kustomize-version: "v4.5.7"

    # Alternative option - authentication via credentials json
    - name: Authenticate to Google Cloud
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v0

    - name: Get the GKE credentials so we can deploy to the cluster
      run: |
        gcloud container clusters get-credentials "$GKE_CLUSTER" --region "$GKE_REGION"
        
    - name: Run a test
      run: |
         gcloud components list
         echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
         curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
         sudo apt update
         sudo apt-get install google-cloud-sdk-gke-gcloud-auth-plugin
         echo "##vso[task.setvariable variable=USE_GKE_GCLOUD_AUTH_PLUGIN]True"
         gcloud components list
         
    - name: Check existing deployment
      run: |
         deploymentBlue=`kubectl get deploy | grep hello-gitops-blue | wc -l`
         deploymentGreen=`kubectl get deploy | grep hello-gitops-green | wc -l`
         if [ $deploymentBlue -eq 0 ]
         then
            echo "Deploying Blue"
            echo "NEW_DEPLOY=hello-gitops-blue" >> $GITHUB_ENV
            echo "OLD_DEPLOY=hello-gitops-green" >> $GITHUB_ENV
            echo "KUZ_RESOURCE_DIR=blue" >> $GITHUB_ENV
         elif [ $deploymentGreen -eq 0 ]
         then
            echo "Deploying Green"
            echo "NEW_DEPLOY=hello-gitops-green" >> $GITHUB_ENV
            echo "OLD_DEPLOY=hello-gitops-blue" >> $GITHUB_ENV
            echo "KUZ_RESOURCE_DIR=green" >> $GITHUB_ENV
         else
            echo "Both Blue and Green deployments are present! Exiting"
            exit 1
         fi

    - name: Update Kubernetes resources
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      run: |
       echo "Updating ${{ env.NEW_DEPLOY }}"
       cd k8s/${{ env.KUZ_RESOURCE_DIR }}
       kustomize edit set image hello-gitops=$DOCKER_USERNAME/hello-gitops:$GITHUB_SHA
       cat kustomization.yaml
    
    - name: Deploy updated Kubernetes resources
      run: |
        echo "Deploying ${{ env.NEW_DEPLOY }} with new image"
        kubectl apply -k k8s/${{ env.KUZ_RESOURCE_DIR }}
        service=`kubectl get service | grep hello-gitops | wc -l`
        if [ $service -eq 0 ]
        then
          echo "Creating service"
          kubectl apply -f k8s/service.yaml
        fi
        ingress=`kubectl get service | grep hello-gitops | wc -l`
        if [ $ingress -eq 0 ]
        then
          echo "Creating ingress"
          kubectl apply -f k8s/ingress.yaml
        fi
        kubectl rollout status deploy/${{ env.NEW_DEPLOY }}
        kubectl patch service hello-gitops -p '{"spec":{"selector":{"app":"${{ env.NEW_DEPLOY }}"}}}'
   
    # DO SOME CHECKS HERE BEFORE COMMIT
    #- name: Deploy updated Kubernetes resources
    #  run: |
    #    kubectl apply -k k8s/

    # REMOVE OLD DEPLOYMENT!!
    - name: Remove old deployment
      run: |
        deploymentOld=`kubectl get deploy | grep ${{ env.OLD_DEPLOY }} | wc -l`
        if [ $deploymentOld -eq 1 ]
        then
          kubectl delete deploy ${{ env.OLD_DEPLOY }} --wait=true
        fi
 
    - name: Commit files
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git commit -am "Bump docker tag"
        
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }} 
